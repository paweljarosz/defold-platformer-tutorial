local DIRECTION_RIGHT = 1
local DIRECTION_LEFT = -1
local BASE_VELOCITY = 500
local GRAVITY = 1000
local JUMP_TAKEOFF = 600

function init(self)
	msg.post("#", "acquire_input_focus") -- tell this component to acquire input focus

	self.velocity = vmath.vector3(0, 0, 0)
	self.ground_contact = false
	self.previous_ground_contact = false
	self.correction = vmath.vector3(0, 0, 0)
end

function walk(self)
	self.velocity.x = BASE_VELOCITY * self.direction
end

function flip(direction)
	sprite.set_hflip("#sprite", direction < 0)
end

function play_animation(self, new_animation)
	if self.animation ~= new_animation then
		sprite.play_flipbook("#sprite", new_animation)
		self.animation = new_animation
	end
end

function animate(self)
	if self.ground_contact then
		if self.velocity.x == 0 then
			play_animation(self, "idle")
		else
			play_animation(self, "run")
		end
	else
		play_animation(self, "jump")
	end
end

-- clamp a number between a min and max value
local function clamp(v, min, max)
	if v < min then return min
	elseif v > max then return max
	else return v end
end

function fixed_update(self, dt)
	--gravity
	self.velocity.y = self.velocity.y - GRAVITY * dt -- gravity is acceleration so G * dt is velocity
	self.velocity.y = clamp(self.velocity.y, -2000, 2000)

	if self.ground_contact then
		self.velocity.y = 0
	end
	self.previous_ground_contact = self.ground_contact
	
	local position = go.get_position() -- get current game object's position
	position = position + self.velocity * dt
	go.set_position(position) -- set the new position to the current game object

	animate(self)

	self.velocity.x = 0
	self.ground_contact = false
	self.correction.x = 0
	self.correction.y = 0
end

function handle_level_collisions(self, normal, distance)

	if distance > 0 then
		-- project accumulated correction onto the penetration vector
		local extent = vmath.project(self.correction, normal * distance)
		if extent < 1 then	-- exclude overshoot projection
			local compensation = (distance - distance * extent) * normal
			go.set_position(go.get_position() + compensation) -- appply compensation instantly
			self.correction = self.correction + compensation -- accumulate the correction
		end
	end

	-- wall on left or right
	if math.abs(normal.x) > 0 then
		self.velocity.x = 0
	end

	-- on the ground
	if normal.y > 0 then
		if not self.previous_ground_contact then
			particlefx.play("#dust")
			sound.play("#land")
		end
		self.ground_contact = true
		self.velocity.y = 0
	end

	-- hit the ceiling
	if normal.y < 0 then
		self.velocity.y = 0
	end
end

function on_message(self, message_id, message, sender)
	if (message_id == hash("contact_point_response"))
	and message.other_group == hash("level") then
		handle_level_collisions(self, message.normal, message.distance)
	end
end

function on_input(self, action_id, action)
	if action_id ~= hash("jump") then
		self.direction = (action_id == hash("right")) and DIRECTION_RIGHT or DIRECTION_LEFT
		walk(self)
		flip(self.direction)
	elseif action.pressed and self.ground_contact then
		self.velocity.y = JUMP_TAKEOFF
		self.ground_contact = false
		particlefx.play("#dust")
		sound.play("#jump")
	end
end
